// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -destination=./mocks/send_strategy.mock.go -package=sendstrategymocks -typed SendStrategy
//

// Package sendstrategymocks is a generated GoMock package.
package sendstrategymocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/robinlg/notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSendStrategy is a mock of SendStrategy interface.
type MockSendStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockSendStrategyMockRecorder
	isgomock struct{}
}

// MockSendStrategyMockRecorder is the mock recorder for MockSendStrategy.
type MockSendStrategyMockRecorder struct {
	mock *MockSendStrategy
}

// NewMockSendStrategy creates a new mock instance.
func NewMockSendStrategy(ctrl *gomock.Controller) *MockSendStrategy {
	mock := &MockSendStrategy{ctrl: ctrl}
	mock.recorder = &MockSendStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendStrategy) EXPECT() *MockSendStrategyMockRecorder {
	return m.recorder
}

// BatchSend mocks base method.
func (m *MockSendStrategy) BatchSend(ctx context.Context, notifications []domain.Notification) ([]domain.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSend", ctx, notifications)
	ret0, _ := ret[0].([]domain.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSend indicates an expected call of BatchSend.
func (mr *MockSendStrategyMockRecorder) BatchSend(ctx, notifications any) *MockSendStrategyBatchSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSend", reflect.TypeOf((*MockSendStrategy)(nil).BatchSend), ctx, notifications)
	return &MockSendStrategyBatchSendCall{Call: call}
}

// MockSendStrategyBatchSendCall wrap *gomock.Call
type MockSendStrategyBatchSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSendStrategyBatchSendCall) Return(arg0 []domain.SendResponse, arg1 error) *MockSendStrategyBatchSendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSendStrategyBatchSendCall) Do(f func(context.Context, []domain.Notification) ([]domain.SendResponse, error)) *MockSendStrategyBatchSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSendStrategyBatchSendCall) DoAndReturn(f func(context.Context, []domain.Notification) ([]domain.SendResponse, error)) *MockSendStrategyBatchSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockSendStrategy) Send(ctx context.Context, notification domain.Notification) (domain.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, notification)
	ret0, _ := ret[0].(domain.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockSendStrategyMockRecorder) Send(ctx, notification any) *MockSendStrategySendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendStrategy)(nil).Send), ctx, notification)
	return &MockSendStrategySendCall{Call: call}
}

// MockSendStrategySendCall wrap *gomock.Call
type MockSendStrategySendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSendStrategySendCall) Return(arg0 domain.SendResponse, arg1 error) *MockSendStrategySendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSendStrategySendCall) Do(f func(context.Context, domain.Notification) (domain.SendResponse, error)) *MockSendStrategySendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSendStrategySendCall) DoAndReturn(f func(context.Context, domain.Notification) (domain.SendResponse, error)) *MockSendStrategySendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

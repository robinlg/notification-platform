// Code generated by MockGen. DO NOT EDIT.
// Source: ./manage.go
//
// Generated by this command:
//
//	mockgen -source=./manage.go -destination=../mocks/mange.mock.go -package=templatemocks -typed ChannelTemplateService
//

// Package templatemocks is a generated GoMock package.
package templatemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/robinlg/notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockChannelTemplateService is a mock of ChannelTemplateService interface.
type MockChannelTemplateService struct {
	ctrl     *gomock.Controller
	recorder *MockChannelTemplateServiceMockRecorder
	isgomock struct{}
}

// MockChannelTemplateServiceMockRecorder is the mock recorder for MockChannelTemplateService.
type MockChannelTemplateServiceMockRecorder struct {
	mock *MockChannelTemplateService
}

// NewMockChannelTemplateService creates a new mock instance.
func NewMockChannelTemplateService(ctrl *gomock.Controller) *MockChannelTemplateService {
	mock := &MockChannelTemplateService{ctrl: ctrl}
	mock.recorder = &MockChannelTemplateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelTemplateService) EXPECT() *MockChannelTemplateServiceMockRecorder {
	return m.recorder
}

// GetTemplateByID mocks base method.
func (m *MockChannelTemplateService) GetTemplateByID(ctx context.Context, templateID int64) (domain.ChannelTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateByID", ctx, templateID)
	ret0, _ := ret[0].(domain.ChannelTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateByID indicates an expected call of GetTemplateByID.
func (mr *MockChannelTemplateServiceMockRecorder) GetTemplateByID(ctx, templateID any) *MockChannelTemplateServiceGetTemplateByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateByID", reflect.TypeOf((*MockChannelTemplateService)(nil).GetTemplateByID), ctx, templateID)
	return &MockChannelTemplateServiceGetTemplateByIDCall{Call: call}
}

// MockChannelTemplateServiceGetTemplateByIDCall wrap *gomock.Call
type MockChannelTemplateServiceGetTemplateByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChannelTemplateServiceGetTemplateByIDCall) Return(arg0 domain.ChannelTemplate, arg1 error) *MockChannelTemplateServiceGetTemplateByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChannelTemplateServiceGetTemplateByIDCall) Do(f func(context.Context, int64) (domain.ChannelTemplate, error)) *MockChannelTemplateServiceGetTemplateByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChannelTemplateServiceGetTemplateByIDCall) DoAndReturn(f func(context.Context, int64) (domain.ChannelTemplate, error)) *MockChannelTemplateServiceGetTemplateByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTemplateByIDAndProviderInfo mocks base method.
func (m *MockChannelTemplateService) GetTemplateByIDAndProviderInfo(ctx context.Context, templateID int64, providerName string, channel domain.Channel) (domain.ChannelTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateByIDAndProviderInfo", ctx, templateID, providerName, channel)
	ret0, _ := ret[0].(domain.ChannelTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateByIDAndProviderInfo indicates an expected call of GetTemplateByIDAndProviderInfo.
func (mr *MockChannelTemplateServiceMockRecorder) GetTemplateByIDAndProviderInfo(ctx, templateID, providerName, channel any) *MockChannelTemplateServiceGetTemplateByIDAndProviderInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateByIDAndProviderInfo", reflect.TypeOf((*MockChannelTemplateService)(nil).GetTemplateByIDAndProviderInfo), ctx, templateID, providerName, channel)
	return &MockChannelTemplateServiceGetTemplateByIDAndProviderInfoCall{Call: call}
}

// MockChannelTemplateServiceGetTemplateByIDAndProviderInfoCall wrap *gomock.Call
type MockChannelTemplateServiceGetTemplateByIDAndProviderInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChannelTemplateServiceGetTemplateByIDAndProviderInfoCall) Return(arg0 domain.ChannelTemplate, arg1 error) *MockChannelTemplateServiceGetTemplateByIDAndProviderInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChannelTemplateServiceGetTemplateByIDAndProviderInfoCall) Do(f func(context.Context, int64, string, domain.Channel) (domain.ChannelTemplate, error)) *MockChannelTemplateServiceGetTemplateByIDAndProviderInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChannelTemplateServiceGetTemplateByIDAndProviderInfoCall) DoAndReturn(f func(context.Context, int64, string, domain.Channel) (domain.ChannelTemplate, error)) *MockChannelTemplateServiceGetTemplateByIDAndProviderInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./config.go
//
// Generated by this command:
//
//	mockgen -source=./config.go -destination=./mocks/config.mock.go -package=configmocks -typed BusinessConfigService
//

// Package configmocks is a generated GoMock package.
package configmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/robinlg/notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBusinessConfigService is a mock of BusinessConfigService interface.
type MockBusinessConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessConfigServiceMockRecorder
	isgomock struct{}
}

// MockBusinessConfigServiceMockRecorder is the mock recorder for MockBusinessConfigService.
type MockBusinessConfigServiceMockRecorder struct {
	mock *MockBusinessConfigService
}

// NewMockBusinessConfigService creates a new mock instance.
func NewMockBusinessConfigService(ctrl *gomock.Controller) *MockBusinessConfigService {
	mock := &MockBusinessConfigService{ctrl: ctrl}
	mock.recorder = &MockBusinessConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessConfigService) EXPECT() *MockBusinessConfigServiceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockBusinessConfigService) GetByID(ctx context.Context, id int64) (domain.BusinessConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.BusinessConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBusinessConfigServiceMockRecorder) GetByID(ctx, id any) *MockBusinessConfigServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBusinessConfigService)(nil).GetByID), ctx, id)
	return &MockBusinessConfigServiceGetByIDCall{Call: call}
}

// MockBusinessConfigServiceGetByIDCall wrap *gomock.Call
type MockBusinessConfigServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBusinessConfigServiceGetByIDCall) Return(arg0 domain.BusinessConfig, arg1 error) *MockBusinessConfigServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBusinessConfigServiceGetByIDCall) Do(f func(context.Context, int64) (domain.BusinessConfig, error)) *MockBusinessConfigServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBusinessConfigServiceGetByIDCall) DoAndReturn(f func(context.Context, int64) (domain.BusinessConfig, error)) *MockBusinessConfigServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

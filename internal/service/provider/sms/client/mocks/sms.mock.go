// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -destination=./mocks/sms.mock.go -package=smsmocks -typed Client
//

// Package smsmocks is a generated GoMock package.
package smsmocks

import (
	reflect "reflect"

	client "github.com/robinlg/notification-platform/internal/service/provider/sms/client"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateTemplate mocks base method.
func (m *MockClient) CreateTemplate(req client.CreateTemplateReq) (client.CreateTemplateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", req)
	ret0, _ := ret[0].(client.CreateTemplateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate.
func (mr *MockClientMockRecorder) CreateTemplate(req any) *MockClientCreateTemplateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockClient)(nil).CreateTemplate), req)
	return &MockClientCreateTemplateCall{Call: call}
}

// MockClientCreateTemplateCall wrap *gomock.Call
type MockClientCreateTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientCreateTemplateCall) Return(arg0 client.CreateTemplateResp, arg1 error) *MockClientCreateTemplateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientCreateTemplateCall) Do(f func(client.CreateTemplateReq) (client.CreateTemplateResp, error)) *MockClientCreateTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientCreateTemplateCall) DoAndReturn(f func(client.CreateTemplateReq) (client.CreateTemplateResp, error)) *MockClientCreateTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockClient) Send(req client.SendReq) (client.SendResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", req)
	ret0, _ := ret[0].(client.SendResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(req any) *MockClientSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), req)
	return &MockClientSendCall{Call: call}
}

// MockClientSendCall wrap *gomock.Call
type MockClientSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientSendCall) Return(arg0 client.SendResp, arg1 error) *MockClientSendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientSendCall) Do(f func(client.SendReq) (client.SendResp, error)) *MockClientSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientSendCall) DoAndReturn(f func(client.SendReq) (client.SendResp, error)) *MockClientSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./sender.go
//
// Generated by this command:
//
//	mockgen -source=./sender.go -destination=./mocks/sender.mock.go -package=sendermocks -typed NotificationSender
//

// Package sendermocks is a generated GoMock package.
package sendermocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/robinlg/notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationSender is a mock of NotificationSender interface.
type MockNotificationSender struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationSenderMockRecorder
	isgomock struct{}
}

// MockNotificationSenderMockRecorder is the mock recorder for MockNotificationSender.
type MockNotificationSenderMockRecorder struct {
	mock *MockNotificationSender
}

// NewMockNotificationSender creates a new mock instance.
func NewMockNotificationSender(ctrl *gomock.Controller) *MockNotificationSender {
	mock := &MockNotificationSender{ctrl: ctrl}
	mock.recorder = &MockNotificationSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationSender) EXPECT() *MockNotificationSenderMockRecorder {
	return m.recorder
}

// BatchSend mocks base method.
func (m *MockNotificationSender) BatchSend(ctx context.Context, notifications []domain.Notification) ([]domain.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSend", ctx, notifications)
	ret0, _ := ret[0].([]domain.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSend indicates an expected call of BatchSend.
func (mr *MockNotificationSenderMockRecorder) BatchSend(ctx, notifications any) *MockNotificationSenderBatchSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSend", reflect.TypeOf((*MockNotificationSender)(nil).BatchSend), ctx, notifications)
	return &MockNotificationSenderBatchSendCall{Call: call}
}

// MockNotificationSenderBatchSendCall wrap *gomock.Call
type MockNotificationSenderBatchSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationSenderBatchSendCall) Return(arg0 []domain.SendResponse, arg1 error) *MockNotificationSenderBatchSendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationSenderBatchSendCall) Do(f func(context.Context, []domain.Notification) ([]domain.SendResponse, error)) *MockNotificationSenderBatchSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationSenderBatchSendCall) DoAndReturn(f func(context.Context, []domain.Notification) ([]domain.SendResponse, error)) *MockNotificationSenderBatchSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockNotificationSender) Send(ctx context.Context, notification domain.Notification) (domain.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, notification)
	ret0, _ := ret[0].(domain.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockNotificationSenderMockRecorder) Send(ctx, notification any) *MockNotificationSenderSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotificationSender)(nil).Send), ctx, notification)
	return &MockNotificationSenderSendCall{Call: call}
}

// MockNotificationSenderSendCall wrap *gomock.Call
type MockNotificationSenderSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationSenderSendCall) Return(arg0 domain.SendResponse, arg1 error) *MockNotificationSenderSendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationSenderSendCall) Do(f func(context.Context, domain.Notification) (domain.SendResponse, error)) *MockNotificationSenderSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationSenderSendCall) DoAndReturn(f func(context.Context, domain.Notification) (domain.SendResponse, error)) *MockNotificationSenderSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./channel.go
//
// Generated by this command:
//
//	mockgen -source=./channel.go -destination=./mocks/channel.mock.go -package=channelmocks -typed Channel
//

// Package channelmocks is a generated GoMock package.
package channelmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/robinlg/notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
	isgomock struct{}
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockChannel) Send(ctx context.Context, notification domain.Notification) (domain.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, notification)
	ret0, _ := ret[0].(domain.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockChannelMockRecorder) Send(ctx, notification any) *MockChannelSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChannel)(nil).Send), ctx, notification)
	return &MockChannelSendCall{Call: call}
}

// MockChannelSendCall wrap *gomock.Call
type MockChannelSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChannelSendCall) Return(arg0 domain.SendResponse, arg1 error) *MockChannelSendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChannelSendCall) Do(f func(context.Context, domain.Notification) (domain.SendResponse, error)) *MockChannelSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChannelSendCall) DoAndReturn(f func(context.Context, domain.Notification) (domain.SendResponse, error)) *MockChannelSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

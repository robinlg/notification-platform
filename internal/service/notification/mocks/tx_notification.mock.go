// Code generated by MockGen. DO NOT EDIT.
// Source: ./tx_notification.go
//
// Generated by this command:
//
//	mockgen -source=./tx_notification.go -destination=./mocks/tx_notification.mock.go -package=notificationmocks -typed TxNotificationService
//

// Package notificationmocks is a generated GoMock package.
package notificationmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/robinlg/notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTxNotificationService is a mock of TxNotificationService interface.
type MockTxNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockTxNotificationServiceMockRecorder
	isgomock struct{}
}

// MockTxNotificationServiceMockRecorder is the mock recorder for MockTxNotificationService.
type MockTxNotificationServiceMockRecorder struct {
	mock *MockTxNotificationService
}

// NewMockTxNotificationService creates a new mock instance.
func NewMockTxNotificationService(ctrl *gomock.Controller) *MockTxNotificationService {
	mock := &MockTxNotificationService{ctrl: ctrl}
	mock.recorder = &MockTxNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxNotificationService) EXPECT() *MockTxNotificationServiceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockTxNotificationService) Cancel(ctx context.Context, bizID int64, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, bizID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockTxNotificationServiceMockRecorder) Cancel(ctx, bizID, key any) *MockTxNotificationServiceCancelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockTxNotificationService)(nil).Cancel), ctx, bizID, key)
	return &MockTxNotificationServiceCancelCall{Call: call}
}

// MockTxNotificationServiceCancelCall wrap *gomock.Call
type MockTxNotificationServiceCancelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxNotificationServiceCancelCall) Return(arg0 error) *MockTxNotificationServiceCancelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxNotificationServiceCancelCall) Do(f func(context.Context, int64, string) error) *MockTxNotificationServiceCancelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxNotificationServiceCancelCall) DoAndReturn(f func(context.Context, int64, string) error) *MockTxNotificationServiceCancelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Commit mocks base method.
func (m *MockTxNotificationService) Commit(ctx context.Context, bizID int64, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, bizID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxNotificationServiceMockRecorder) Commit(ctx, bizID, key any) *MockTxNotificationServiceCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxNotificationService)(nil).Commit), ctx, bizID, key)
	return &MockTxNotificationServiceCommitCall{Call: call}
}

// MockTxNotificationServiceCommitCall wrap *gomock.Call
type MockTxNotificationServiceCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxNotificationServiceCommitCall) Return(arg0 error) *MockTxNotificationServiceCommitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxNotificationServiceCommitCall) Do(f func(context.Context, int64, string) error) *MockTxNotificationServiceCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxNotificationServiceCommitCall) DoAndReturn(f func(context.Context, int64, string) error) *MockTxNotificationServiceCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Prepare mocks base method.
func (m *MockTxNotificationService) Prepare(ctx context.Context, notification domain.Notification) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, notification)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockTxNotificationServiceMockRecorder) Prepare(ctx, notification any) *MockTxNotificationServicePrepareCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockTxNotificationService)(nil).Prepare), ctx, notification)
	return &MockTxNotificationServicePrepareCall{Call: call}
}

// MockTxNotificationServicePrepareCall wrap *gomock.Call
type MockTxNotificationServicePrepareCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxNotificationServicePrepareCall) Return(arg0 uint64, arg1 error) *MockTxNotificationServicePrepareCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxNotificationServicePrepareCall) Do(f func(context.Context, domain.Notification) (uint64, error)) *MockTxNotificationServicePrepareCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxNotificationServicePrepareCall) DoAndReturn(f func(context.Context, domain.Notification) (uint64, error)) *MockTxNotificationServicePrepareCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notification/v1/notification_query.proto

package notificationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on QueryNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotificationRequestMultiError, or nil if none found.
func (m *QueryNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return QueryNotificationRequestMultiError(errors)
	}

	return nil
}

// QueryNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by QueryNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotificationRequestMultiError) AllErrors() []error { return m }

// QueryNotificationRequestValidationError is the validation error returned by
// QueryNotificationRequest.Validate if the designated constraints aren't met.
type QueryNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotificationRequestValidationError) ErrorName() string {
	return "QueryNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotificationRequestValidationError{}

// Validate checks the field values on QueryNotificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotificationResponseMultiError, or nil if none found.
func (m *QueryNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryNotificationResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryNotificationResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryNotificationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryNotificationResponseMultiError(errors)
	}

	return nil
}

// QueryNotificationResponseMultiError is an error wrapping multiple validation
// errors returned by QueryNotificationResponse.ValidateAll() if the
// designated constraints aren't met.
type QueryNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotificationResponseMultiError) AllErrors() []error { return m }

// QueryNotificationResponseValidationError is the validation error returned by
// QueryNotificationResponse.Validate if the designated constraints aren't met.
type QueryNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotificationResponseValidationError) ErrorName() string {
	return "QueryNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotificationResponseValidationError{}

// Validate checks the field values on BatchQueryNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchQueryNotificationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchQueryNotificationsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchQueryNotificationsRequestMultiError, or nil if none found.
func (m *BatchQueryNotificationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchQueryNotificationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchQueryNotificationsRequestMultiError(errors)
	}

	return nil
}

// BatchQueryNotificationsRequestMultiError is an error wrapping multiple
// validation errors returned by BatchQueryNotificationsRequest.ValidateAll()
// if the designated constraints aren't met.
type BatchQueryNotificationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchQueryNotificationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchQueryNotificationsRequestMultiError) AllErrors() []error { return m }

// BatchQueryNotificationsRequestValidationError is the validation error
// returned by BatchQueryNotificationsRequest.Validate if the designated
// constraints aren't met.
type BatchQueryNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchQueryNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchQueryNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchQueryNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchQueryNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchQueryNotificationsRequestValidationError) ErrorName() string {
	return "BatchQueryNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchQueryNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchQueryNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchQueryNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchQueryNotificationsRequestValidationError{}

// Validate checks the field values on BatchQueryNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchQueryNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchQueryNotificationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchQueryNotificationsResponseMultiError, or nil if none found.
func (m *BatchQueryNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchQueryNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchQueryNotificationsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchQueryNotificationsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchQueryNotificationsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchQueryNotificationsResponseMultiError(errors)
	}

	return nil
}

// BatchQueryNotificationsResponseMultiError is an error wrapping multiple
// validation errors returned by BatchQueryNotificationsResponse.ValidateAll()
// if the designated constraints aren't met.
type BatchQueryNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchQueryNotificationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchQueryNotificationsResponseMultiError) AllErrors() []error { return m }

// BatchQueryNotificationsResponseValidationError is the validation error
// returned by BatchQueryNotificationsResponse.Validate if the designated
// constraints aren't met.
type BatchQueryNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchQueryNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchQueryNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchQueryNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchQueryNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchQueryNotificationsResponseValidationError) ErrorName() string {
	return "BatchQueryNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchQueryNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchQueryNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchQueryNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchQueryNotificationsResponseValidationError{}
